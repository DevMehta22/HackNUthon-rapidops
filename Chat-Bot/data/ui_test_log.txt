============================= test session starts ==============================
platform linux -- Python 3.9.21, pytest-8.3.5, pluggy-1.5.0
rootdir: /home/runner/work/HackNUthon-rapidops/HackNUthon-rapidops
plugins: metadata-3.1.1, langsmith-0.3.19, html-4.1.1, json-report-1.5.0, anyio-4.9.0
collected 10 items

Selenium-test/app.py ...FFFF.FF                                          [100%]

=================================== FAILURES ===================================
_____________________ test_execute_test_case[3-test_case3] _____________________

driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4d2a2112c0574167d478b6c5eed4be11")>
test_case_index = 3
test_case = {'description': 'Attempt login with an invalid email format.', 'expected_result': 'Error message is displayed for the ...e': 'invalid_email'}, {'action': 'click', 'target': "[data-testid='Login now']"}], 'test_name': 'Invalid Email Format'}

    @pytest.mark.parametrize("test_case_index, test_case", enumerate(test_cases))
    def test_execute_test_case(driver, test_case_index, test_case):
        """Run each test case from JSON, marking certain ones as passed without execution."""
    
        # Mark test cases 2 and 3 (index 1 and 2) as "skipped but passed"
        if test_case_index in [1, 2]:
            print(f"‚úÖ Skipping {test_case['test_name']} (index {test_case_index}) but marking as passed.")
            return  # Exit without failing or skipping
    
        print(f"\nüöÄ Executing: {test_case['test_name']}")
        driver.get(BASE_URL)
        wait = WebDriverWait(driver, 15)  # Increased wait time for dynamic elements
    
        # Ensure page is fully loaded
        wait.until(lambda d: d.execute_script('return document.readyState') == 'complete')
    
        for step in test_case['steps']:
            action = step.get("action")
            target = step.get("target")
            value = step.get("value", "")
    
            try:
                if action == "click":
                    if target.startswith("TEXT:"):
                        text = target.replace("TEXT:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), '{text.lower()}')]")))
                    elif target.startswith("INSTANCE:"):
                        instance_name = target.replace("INSTANCE:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(@class, '{instance_name}')]")))
                    else:
>                       element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, target)))

Selenium-test/app.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="4d2a2112c0574167d478b6c5eed4be11")>
method = <function element_to_be_clickable.<locals>._predicate at 0x7fb15c0d5b80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x563bd06afffa <unknown>
E       #1 0x563bd016e970 <unknown>
E       #2 0x563bd01c0385 <unknown>
E       #3 0x563bd01c05b1 <unknown>
E       #4 0x563bd020f3c4 <unknown>
E       #5 0x563bd01e62bd <unknown>
E       #6 0x563bd020c70c <unknown>
E       #7 0x563bd01e6063 <unknown>
E       #8 0x563bd01b2328 <unknown>
E       #9 0x563bd01b3491 <unknown>
E       #10 0x563bd067742b <unknown>
E       #11 0x563bd067b2ec <unknown>
E       #12 0x563bd065ea22 <unknown>
E       #13 0x563bd067be64 <unknown>
E       #14 0x563bd0642bef <unknown>
E       #15 0x563bd069e558 <unknown>
E       #16 0x563bd069e736 <unknown>
E       #17 0x563bd06aee76 <unknown>
E       #18 0x7fb014e9caa4 <unknown>
E       #19 0x7fb014f29c3c <unknown>

/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException

During handling of the above exception, another exception occurred:

driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4d2a2112c0574167d478b6c5eed4be11")>
test_case_index = 3
test_case = {'description': 'Attempt login with an invalid email format.', 'expected_result': 'Error message is displayed for the ...e': 'invalid_email'}, {'action': 'click', 'target': "[data-testid='Login now']"}], 'test_name': 'Invalid Email Format'}

    @pytest.mark.parametrize("test_case_index, test_case", enumerate(test_cases))
    def test_execute_test_case(driver, test_case_index, test_case):
        """Run each test case from JSON, marking certain ones as passed without execution."""
    
        # Mark test cases 2 and 3 (index 1 and 2) as "skipped but passed"
        if test_case_index in [1, 2]:
            print(f"‚úÖ Skipping {test_case['test_name']} (index {test_case_index}) but marking as passed.")
            return  # Exit without failing or skipping
    
        print(f"\nüöÄ Executing: {test_case['test_name']}")
        driver.get(BASE_URL)
        wait = WebDriverWait(driver, 15)  # Increased wait time for dynamic elements
    
        # Ensure page is fully loaded
        wait.until(lambda d: d.execute_script('return document.readyState') == 'complete')
    
        for step in test_case['steps']:
            action = step.get("action")
            target = step.get("target")
            value = step.get("value", "")
    
            try:
                if action == "click":
                    if target.startswith("TEXT:"):
                        text = target.replace("TEXT:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), '{text.lower()}')]")))
                    elif target.startswith("INSTANCE:"):
                        instance_name = target.replace("INSTANCE:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(@class, '{instance_name}')]")))
                    else:
                        element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, target)))
                    element.click()
    
                elif action == "sendKeys":
                    if target.startswith("TEXT:"):
                        text = target.replace("TEXT:", "").strip()
                        element = wait.until(EC.presence_of_element_located((By.XPATH, f"//input[@placeholder='{text}']")))
                    else:
                        element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, target)))
                    element.clear()
                    element.send_keys(value)
    
                elif action == "resizeWindow":
                    width, height = map(int, target.split("x"))
                    driver.set_window_size(width, height)
    
                time.sleep(1)  # Reduce delay for efficiency
    
            except Exception as e:
                screenshot_path = os.path.join(BASE_DIR, "error_screenshot.png")
                driver.save_screenshot(screenshot_path)
>               pytest.fail(f"‚ùå Error in step '{step}': {e}. Screenshot saved at {screenshot_path}")
E               Failed: ‚ùå Error in step '{'action': 'click', 'target': "[data-testid='Login now']"}': Message: 
E               Stacktrace:
E               #0 0x563bd06afffa <unknown>
E               #1 0x563bd016e970 <unknown>
E               #2 0x563bd01c0385 <unknown>
E               #3 0x563bd01c05b1 <unknown>
E               #4 0x563bd020f3c4 <unknown>
E               #5 0x563bd01e62bd <unknown>
E               #6 0x563bd020c70c <unknown>
E               #7 0x563bd01e6063 <unknown>
E               #8 0x563bd01b2328 <unknown>
E               #9 0x563bd01b3491 <unknown>
E               #10 0x563bd067742b <unknown>
E               #11 0x563bd067b2ec <unknown>
E               #12 0x563bd065ea22 <unknown>
E               #13 0x563bd067be64 <unknown>
E               #14 0x563bd0642bef <unknown>
E               #15 0x563bd069e558 <unknown>
E               #16 0x563bd069e736 <unknown>
E               #17 0x563bd06aee76 <unknown>
E               #18 0x7fb014e9caa4 <unknown>
E               #19 0x7fb014f29c3c <unknown>
E               . Screenshot saved at /home/runner/work/HackNUthon-rapidops/HackNUthon-rapidops/Selenium-test/error_screenshot.png

Selenium-test/app.py:86: Failed
----------------------------- Captured stdout call -----------------------------

üöÄ Executing: Invalid Email Format
_____________________ test_execute_test_case[4-test_case4] _____________________

driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4d2a2112c0574167d478b6c5eed4be11")>
test_case_index = 4
test_case = {'description': 'Verify password visibility toggle functionality.', 'expected_result': "Password field input type chan...cks.", 'steps': [{'action': 'click', 'target': "[data-testid='Icon/eye']"}], 'test_name': 'Password Visibility Toggle'}

    @pytest.mark.parametrize("test_case_index, test_case", enumerate(test_cases))
    def test_execute_test_case(driver, test_case_index, test_case):
        """Run each test case from JSON, marking certain ones as passed without execution."""
    
        # Mark test cases 2 and 3 (index 1 and 2) as "skipped but passed"
        if test_case_index in [1, 2]:
            print(f"‚úÖ Skipping {test_case['test_name']} (index {test_case_index}) but marking as passed.")
            return  # Exit without failing or skipping
    
        print(f"\nüöÄ Executing: {test_case['test_name']}")
        driver.get(BASE_URL)
        wait = WebDriverWait(driver, 15)  # Increased wait time for dynamic elements
    
        # Ensure page is fully loaded
        wait.until(lambda d: d.execute_script('return document.readyState') == 'complete')
    
        for step in test_case['steps']:
            action = step.get("action")
            target = step.get("target")
            value = step.get("value", "")
    
            try:
                if action == "click":
                    if target.startswith("TEXT:"):
                        text = target.replace("TEXT:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), '{text.lower()}')]")))
                    elif target.startswith("INSTANCE:"):
                        instance_name = target.replace("INSTANCE:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(@class, '{instance_name}')]")))
                    else:
>                       element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, target)))

Selenium-test/app.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="4d2a2112c0574167d478b6c5eed4be11")>
method = <function element_to_be_clickable.<locals>._predicate at 0x7fb15bb5fc10>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x563bd06afffa <unknown>
E       #1 0x563bd016e970 <unknown>
E       #2 0x563bd01c0385 <unknown>
E       #3 0x563bd01c05b1 <unknown>
E       #4 0x563bd020f3c4 <unknown>
E       #5 0x563bd01e62bd <unknown>
E       #6 0x563bd020c70c <unknown>
E       #7 0x563bd01e6063 <unknown>
E       #8 0x563bd01b2328 <unknown>
E       #9 0x563bd01b3491 <unknown>
E       #10 0x563bd067742b <unknown>
E       #11 0x563bd067b2ec <unknown>
E       #12 0x563bd065ea22 <unknown>
E       #13 0x563bd067be64 <unknown>
E       #14 0x563bd0642bef <unknown>
E       #15 0x563bd069e558 <unknown>
E       #16 0x563bd069e736 <unknown>
E       #17 0x563bd06aee76 <unknown>
E       #18 0x7fb014e9caa4 <unknown>
E       #19 0x7fb014f29c3c <unknown>

/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException

During handling of the above exception, another exception occurred:

driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4d2a2112c0574167d478b6c5eed4be11")>
test_case_index = 4
test_case = {'description': 'Verify password visibility toggle functionality.', 'expected_result': "Password field input type chan...cks.", 'steps': [{'action': 'click', 'target': "[data-testid='Icon/eye']"}], 'test_name': 'Password Visibility Toggle'}

    @pytest.mark.parametrize("test_case_index, test_case", enumerate(test_cases))
    def test_execute_test_case(driver, test_case_index, test_case):
        """Run each test case from JSON, marking certain ones as passed without execution."""
    
        # Mark test cases 2 and 3 (index 1 and 2) as "skipped but passed"
        if test_case_index in [1, 2]:
            print(f"‚úÖ Skipping {test_case['test_name']} (index {test_case_index}) but marking as passed.")
            return  # Exit without failing or skipping
    
        print(f"\nüöÄ Executing: {test_case['test_name']}")
        driver.get(BASE_URL)
        wait = WebDriverWait(driver, 15)  # Increased wait time for dynamic elements
    
        # Ensure page is fully loaded
        wait.until(lambda d: d.execute_script('return document.readyState') == 'complete')
    
        for step in test_case['steps']:
            action = step.get("action")
            target = step.get("target")
            value = step.get("value", "")
    
            try:
                if action == "click":
                    if target.startswith("TEXT:"):
                        text = target.replace("TEXT:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), '{text.lower()}')]")))
                    elif target.startswith("INSTANCE:"):
                        instance_name = target.replace("INSTANCE:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(@class, '{instance_name}')]")))
                    else:
                        element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, target)))
                    element.click()
    
                elif action == "sendKeys":
                    if target.startswith("TEXT:"):
                        text = target.replace("TEXT:", "").strip()
                        element = wait.until(EC.presence_of_element_located((By.XPATH, f"//input[@placeholder='{text}']")))
                    else:
                        element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, target)))
                    element.clear()
                    element.send_keys(value)
    
                elif action == "resizeWindow":
                    width, height = map(int, target.split("x"))
                    driver.set_window_size(width, height)
    
                time.sleep(1)  # Reduce delay for efficiency
    
            except Exception as e:
                screenshot_path = os.path.join(BASE_DIR, "error_screenshot.png")
                driver.save_screenshot(screenshot_path)
>               pytest.fail(f"‚ùå Error in step '{step}': {e}. Screenshot saved at {screenshot_path}")
E               Failed: ‚ùå Error in step '{'action': 'click', 'target': "[data-testid='Icon/eye']"}': Message: 
E               Stacktrace:
E               #0 0x563bd06afffa <unknown>
E               #1 0x563bd016e970 <unknown>
E               #2 0x563bd01c0385 <unknown>
E               #3 0x563bd01c05b1 <unknown>
E               #4 0x563bd020f3c4 <unknown>
E               #5 0x563bd01e62bd <unknown>
E               #6 0x563bd020c70c <unknown>
E               #7 0x563bd01e6063 <unknown>
E               #8 0x563bd01b2328 <unknown>
E               #9 0x563bd01b3491 <unknown>
E               #10 0x563bd067742b <unknown>
E               #11 0x563bd067b2ec <unknown>
E               #12 0x563bd065ea22 <unknown>
E               #13 0x563bd067be64 <unknown>
E               #14 0x563bd0642bef <unknown>
E               #15 0x563bd069e558 <unknown>
E               #16 0x563bd069e736 <unknown>
E               #17 0x563bd06aee76 <unknown>
E               #18 0x7fb014e9caa4 <unknown>
E               #19 0x7fb014f29c3c <unknown>
E               . Screenshot saved at /home/runner/work/HackNUthon-rapidops/HackNUthon-rapidops/Selenium-test/error_screenshot.png

Selenium-test/app.py:86: Failed
----------------------------- Captured stdout call -----------------------------

üöÄ Executing: Password Visibility Toggle
_____________________ test_execute_test_case[5-test_case5] _____________________

driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4d2a2112c0574167d478b6c5eed4be11")>
test_case_index = 5
test_case = {'description': 'Navigate to the sign-up page.', 'expected_result': 'Sign-up page is displayed with relevant fields and buttons.', 'steps': [{'action': 'click', 'target': "[data-testid='Sign up']"}], 'test_name': 'Navigate to Sign Up Page'}

    @pytest.mark.parametrize("test_case_index, test_case", enumerate(test_cases))
    def test_execute_test_case(driver, test_case_index, test_case):
        """Run each test case from JSON, marking certain ones as passed without execution."""
    
        # Mark test cases 2 and 3 (index 1 and 2) as "skipped but passed"
        if test_case_index in [1, 2]:
            print(f"‚úÖ Skipping {test_case['test_name']} (index {test_case_index}) but marking as passed.")
            return  # Exit without failing or skipping
    
        print(f"\nüöÄ Executing: {test_case['test_name']}")
        driver.get(BASE_URL)
        wait = WebDriverWait(driver, 15)  # Increased wait time for dynamic elements
    
        # Ensure page is fully loaded
        wait.until(lambda d: d.execute_script('return document.readyState') == 'complete')
    
        for step in test_case['steps']:
            action = step.get("action")
            target = step.get("target")
            value = step.get("value", "")
    
            try:
                if action == "click":
                    if target.startswith("TEXT:"):
                        text = target.replace("TEXT:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), '{text.lower()}')]")))
                    elif target.startswith("INSTANCE:"):
                        instance_name = target.replace("INSTANCE:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(@class, '{instance_name}')]")))
                    else:
>                       element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, target)))

Selenium-test/app.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="4d2a2112c0574167d478b6c5eed4be11")>
method = <function element_to_be_clickable.<locals>._predicate at 0x7fb15bb11ee0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x563bd06afffa <unknown>
E       #1 0x563bd016e970 <unknown>
E       #2 0x563bd01c0385 <unknown>
E       #3 0x563bd01c05b1 <unknown>
E       #4 0x563bd020f3c4 <unknown>
E       #5 0x563bd01e62bd <unknown>
E       #6 0x563bd020c70c <unknown>
E       #7 0x563bd01e6063 <unknown>
E       #8 0x563bd01b2328 <unknown>
E       #9 0x563bd01b3491 <unknown>
E       #10 0x563bd067742b <unknown>
E       #11 0x563bd067b2ec <unknown>
E       #12 0x563bd065ea22 <unknown>
E       #13 0x563bd067be64 <unknown>
E       #14 0x563bd0642bef <unknown>
E       #15 0x563bd069e558 <unknown>
E       #16 0x563bd069e736 <unknown>
E       #17 0x563bd06aee76 <unknown>
E       #18 0x7fb014e9caa4 <unknown>
E       #19 0x7fb014f29c3c <unknown>

/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException

During handling of the above exception, another exception occurred:

driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4d2a2112c0574167d478b6c5eed4be11")>
test_case_index = 5
test_case = {'description': 'Navigate to the sign-up page.', 'expected_result': 'Sign-up page is displayed with relevant fields and buttons.', 'steps': [{'action': 'click', 'target': "[data-testid='Sign up']"}], 'test_name': 'Navigate to Sign Up Page'}

    @pytest.mark.parametrize("test_case_index, test_case", enumerate(test_cases))
    def test_execute_test_case(driver, test_case_index, test_case):
        """Run each test case from JSON, marking certain ones as passed without execution."""
    
        # Mark test cases 2 and 3 (index 1 and 2) as "skipped but passed"
        if test_case_index in [1, 2]:
            print(f"‚úÖ Skipping {test_case['test_name']} (index {test_case_index}) but marking as passed.")
            return  # Exit without failing or skipping
    
        print(f"\nüöÄ Executing: {test_case['test_name']}")
        driver.get(BASE_URL)
        wait = WebDriverWait(driver, 15)  # Increased wait time for dynamic elements
    
        # Ensure page is fully loaded
        wait.until(lambda d: d.execute_script('return document.readyState') == 'complete')
    
        for step in test_case['steps']:
            action = step.get("action")
            target = step.get("target")
            value = step.get("value", "")
    
            try:
                if action == "click":
                    if target.startswith("TEXT:"):
                        text = target.replace("TEXT:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), '{text.lower()}')]")))
                    elif target.startswith("INSTANCE:"):
                        instance_name = target.replace("INSTANCE:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(@class, '{instance_name}')]")))
                    else:
                        element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, target)))
                    element.click()
    
                elif action == "sendKeys":
                    if target.startswith("TEXT:"):
                        text = target.replace("TEXT:", "").strip()
                        element = wait.until(EC.presence_of_element_located((By.XPATH, f"//input[@placeholder='{text}']")))
                    else:
                        element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, target)))
                    element.clear()
                    element.send_keys(value)
    
                elif action == "resizeWindow":
                    width, height = map(int, target.split("x"))
                    driver.set_window_size(width, height)
    
                time.sleep(1)  # Reduce delay for efficiency
    
            except Exception as e:
                screenshot_path = os.path.join(BASE_DIR, "error_screenshot.png")
                driver.save_screenshot(screenshot_path)
>               pytest.fail(f"‚ùå Error in step '{step}': {e}. Screenshot saved at {screenshot_path}")
E               Failed: ‚ùå Error in step '{'action': 'click', 'target': "[data-testid='Sign up']"}': Message: 
E               Stacktrace:
E               #0 0x563bd06afffa <unknown>
E               #1 0x563bd016e970 <unknown>
E               #2 0x563bd01c0385 <unknown>
E               #3 0x563bd01c05b1 <unknown>
E               #4 0x563bd020f3c4 <unknown>
E               #5 0x563bd01e62bd <unknown>
E               #6 0x563bd020c70c <unknown>
E               #7 0x563bd01e6063 <unknown>
E               #8 0x563bd01b2328 <unknown>
E               #9 0x563bd01b3491 <unknown>
E               #10 0x563bd067742b <unknown>
E               #11 0x563bd067b2ec <unknown>
E               #12 0x563bd065ea22 <unknown>
E               #13 0x563bd067be64 <unknown>
E               #14 0x563bd0642bef <unknown>
E               #15 0x563bd069e558 <unknown>
E               #16 0x563bd069e736 <unknown>
E               #17 0x563bd06aee76 <unknown>
E               #18 0x7fb014e9caa4 <unknown>
E               #19 0x7fb014f29c3c <unknown>
E               . Screenshot saved at /home/runner/work/HackNUthon-rapidops/HackNUthon-rapidops/Selenium-test/error_screenshot.png

Selenium-test/app.py:86: Failed
----------------------------- Captured stdout call -----------------------------

üöÄ Executing: Navigate to Sign Up Page
_____________________ test_execute_test_case[6-test_case6] _____________________

driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4d2a2112c0574167d478b6c5eed4be11")>
test_case_index = 6
test_case = {'description': 'Verify carousel navigation functionality on the homepage.', 'expected_result': 'Carousel slides to th...teps': [{'action': 'click', 'target': "[data-testid='Arrow - Right 3']"}], 'test_name': 'Homepage Carousel Navigation'}

    @pytest.mark.parametrize("test_case_index, test_case", enumerate(test_cases))
    def test_execute_test_case(driver, test_case_index, test_case):
        """Run each test case from JSON, marking certain ones as passed without execution."""
    
        # Mark test cases 2 and 3 (index 1 and 2) as "skipped but passed"
        if test_case_index in [1, 2]:
            print(f"‚úÖ Skipping {test_case['test_name']} (index {test_case_index}) but marking as passed.")
            return  # Exit without failing or skipping
    
        print(f"\nüöÄ Executing: {test_case['test_name']}")
        driver.get(BASE_URL)
        wait = WebDriverWait(driver, 15)  # Increased wait time for dynamic elements
    
        # Ensure page is fully loaded
        wait.until(lambda d: d.execute_script('return document.readyState') == 'complete')
    
        for step in test_case['steps']:
            action = step.get("action")
            target = step.get("target")
            value = step.get("value", "")
    
            try:
                if action == "click":
                    if target.startswith("TEXT:"):
                        text = target.replace("TEXT:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), '{text.lower()}')]")))
                    elif target.startswith("INSTANCE:"):
                        instance_name = target.replace("INSTANCE:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(@class, '{instance_name}')]")))
                    else:
>                       element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, target)))

Selenium-test/app.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="4d2a2112c0574167d478b6c5eed4be11")>
method = <function element_to_be_clickable.<locals>._predicate at 0x7fb15bb40e50>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x563bd06afffa <unknown>
E       #1 0x563bd016e970 <unknown>
E       #2 0x563bd01c0385 <unknown>
E       #3 0x563bd01c05b1 <unknown>
E       #4 0x563bd020f3c4 <unknown>
E       #5 0x563bd01e62bd <unknown>
E       #6 0x563bd020c70c <unknown>
E       #7 0x563bd01e6063 <unknown>
E       #8 0x563bd01b2328 <unknown>
E       #9 0x563bd01b3491 <unknown>
E       #10 0x563bd067742b <unknown>
E       #11 0x563bd067b2ec <unknown>
E       #12 0x563bd065ea22 <unknown>
E       #13 0x563bd067be64 <unknown>
E       #14 0x563bd0642bef <unknown>
E       #15 0x563bd069e558 <unknown>
E       #16 0x563bd069e736 <unknown>
E       #17 0x563bd06aee76 <unknown>
E       #18 0x7fb014e9caa4 <unknown>
E       #19 0x7fb014f29c3c <unknown>

/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException

During handling of the above exception, another exception occurred:

driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4d2a2112c0574167d478b6c5eed4be11")>
test_case_index = 6
test_case = {'description': 'Verify carousel navigation functionality on the homepage.', 'expected_result': 'Carousel slides to th...teps': [{'action': 'click', 'target': "[data-testid='Arrow - Right 3']"}], 'test_name': 'Homepage Carousel Navigation'}

    @pytest.mark.parametrize("test_case_index, test_case", enumerate(test_cases))
    def test_execute_test_case(driver, test_case_index, test_case):
        """Run each test case from JSON, marking certain ones as passed without execution."""
    
        # Mark test cases 2 and 3 (index 1 and 2) as "skipped but passed"
        if test_case_index in [1, 2]:
            print(f"‚úÖ Skipping {test_case['test_name']} (index {test_case_index}) but marking as passed.")
            return  # Exit without failing or skipping
    
        print(f"\nüöÄ Executing: {test_case['test_name']}")
        driver.get(BASE_URL)
        wait = WebDriverWait(driver, 15)  # Increased wait time for dynamic elements
    
        # Ensure page is fully loaded
        wait.until(lambda d: d.execute_script('return document.readyState') == 'complete')
    
        for step in test_case['steps']:
            action = step.get("action")
            target = step.get("target")
            value = step.get("value", "")
    
            try:
                if action == "click":
                    if target.startswith("TEXT:"):
                        text = target.replace("TEXT:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), '{text.lower()}')]")))
                    elif target.startswith("INSTANCE:"):
                        instance_name = target.replace("INSTANCE:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(@class, '{instance_name}')]")))
                    else:
                        element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, target)))
                    element.click()
    
                elif action == "sendKeys":
                    if target.startswith("TEXT:"):
                        text = target.replace("TEXT:", "").strip()
                        element = wait.until(EC.presence_of_element_located((By.XPATH, f"//input[@placeholder='{text}']")))
                    else:
                        element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, target)))
                    element.clear()
                    element.send_keys(value)
    
                elif action == "resizeWindow":
                    width, height = map(int, target.split("x"))
                    driver.set_window_size(width, height)
    
                time.sleep(1)  # Reduce delay for efficiency
    
            except Exception as e:
                screenshot_path = os.path.join(BASE_DIR, "error_screenshot.png")
                driver.save_screenshot(screenshot_path)
>               pytest.fail(f"‚ùå Error in step '{step}': {e}. Screenshot saved at {screenshot_path}")
E               Failed: ‚ùå Error in step '{'action': 'click', 'target': "[data-testid='Arrow - Right 3']"}': Message: 
E               Stacktrace:
E               #0 0x563bd06afffa <unknown>
E               #1 0x563bd016e970 <unknown>
E               #2 0x563bd01c0385 <unknown>
E               #3 0x563bd01c05b1 <unknown>
E               #4 0x563bd020f3c4 <unknown>
E               #5 0x563bd01e62bd <unknown>
E               #6 0x563bd020c70c <unknown>
E               #7 0x563bd01e6063 <unknown>
E               #8 0x563bd01b2328 <unknown>
E               #9 0x563bd01b3491 <unknown>
E               #10 0x563bd067742b <unknown>
E               #11 0x563bd067b2ec <unknown>
E               #12 0x563bd065ea22 <unknown>
E               #13 0x563bd067be64 <unknown>
E               #14 0x563bd0642bef <unknown>
E               #15 0x563bd069e558 <unknown>
E               #16 0x563bd069e736 <unknown>
E               #17 0x563bd06aee76 <unknown>
E               #18 0x7fb014e9caa4 <unknown>
E               #19 0x7fb014f29c3c <unknown>
E               . Screenshot saved at /home/runner/work/HackNUthon-rapidops/HackNUthon-rapidops/Selenium-test/error_screenshot.png

Selenium-test/app.py:86: Failed
----------------------------- Captured stdout call -----------------------------

üöÄ Executing: Homepage Carousel Navigation
_____________________ test_execute_test_case[8-test_case8] _____________________

driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4d2a2112c0574167d478b6c5eed4be11")>
test_case_index = 8
test_case = {'description': 'Verify category navigation functionality on the homepage.', 'expected_result': 'Navigates to the groc....', 'steps': [{'action': 'click', 'target': "[data-testid='Groceries']"}], 'test_name': 'Homepage Category Navigation'}

    @pytest.mark.parametrize("test_case_index, test_case", enumerate(test_cases))
    def test_execute_test_case(driver, test_case_index, test_case):
        """Run each test case from JSON, marking certain ones as passed without execution."""
    
        # Mark test cases 2 and 3 (index 1 and 2) as "skipped but passed"
        if test_case_index in [1, 2]:
            print(f"‚úÖ Skipping {test_case['test_name']} (index {test_case_index}) but marking as passed.")
            return  # Exit without failing or skipping
    
        print(f"\nüöÄ Executing: {test_case['test_name']}")
        driver.get(BASE_URL)
        wait = WebDriverWait(driver, 15)  # Increased wait time for dynamic elements
    
        # Ensure page is fully loaded
        wait.until(lambda d: d.execute_script('return document.readyState') == 'complete')
    
        for step in test_case['steps']:
            action = step.get("action")
            target = step.get("target")
            value = step.get("value", "")
    
            try:
                if action == "click":
                    if target.startswith("TEXT:"):
                        text = target.replace("TEXT:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), '{text.lower()}')]")))
                    elif target.startswith("INSTANCE:"):
                        instance_name = target.replace("INSTANCE:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(@class, '{instance_name}')]")))
                    else:
>                       element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, target)))

Selenium-test/app.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="4d2a2112c0574167d478b6c5eed4be11")>
method = <function element_to_be_clickable.<locals>._predicate at 0x7fb15bb40f70>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x563bd06afffa <unknown>
E       #1 0x563bd016e970 <unknown>
E       #2 0x563bd01c0385 <unknown>
E       #3 0x563bd01c05b1 <unknown>
E       #4 0x563bd020f3c4 <unknown>
E       #5 0x563bd01e62bd <unknown>
E       #6 0x563bd020c70c <unknown>
E       #7 0x563bd01e6063 <unknown>
E       #8 0x563bd01b2328 <unknown>
E       #9 0x563bd01b3491 <unknown>
E       #10 0x563bd067742b <unknown>
E       #11 0x563bd067b2ec <unknown>
E       #12 0x563bd065ea22 <unknown>
E       #13 0x563bd067be64 <unknown>
E       #14 0x563bd0642bef <unknown>
E       #15 0x563bd069e558 <unknown>
E       #16 0x563bd069e736 <unknown>
E       #17 0x563bd06aee76 <unknown>
E       #18 0x7fb014e9caa4 <unknown>
E       #19 0x7fb014f29c3c <unknown>

/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException

During handling of the above exception, another exception occurred:

driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4d2a2112c0574167d478b6c5eed4be11")>
test_case_index = 8
test_case = {'description': 'Verify category navigation functionality on the homepage.', 'expected_result': 'Navigates to the groc....', 'steps': [{'action': 'click', 'target': "[data-testid='Groceries']"}], 'test_name': 'Homepage Category Navigation'}

    @pytest.mark.parametrize("test_case_index, test_case", enumerate(test_cases))
    def test_execute_test_case(driver, test_case_index, test_case):
        """Run each test case from JSON, marking certain ones as passed without execution."""
    
        # Mark test cases 2 and 3 (index 1 and 2) as "skipped but passed"
        if test_case_index in [1, 2]:
            print(f"‚úÖ Skipping {test_case['test_name']} (index {test_case_index}) but marking as passed.")
            return  # Exit without failing or skipping
    
        print(f"\nüöÄ Executing: {test_case['test_name']}")
        driver.get(BASE_URL)
        wait = WebDriverWait(driver, 15)  # Increased wait time for dynamic elements
    
        # Ensure page is fully loaded
        wait.until(lambda d: d.execute_script('return document.readyState') == 'complete')
    
        for step in test_case['steps']:
            action = step.get("action")
            target = step.get("target")
            value = step.get("value", "")
    
            try:
                if action == "click":
                    if target.startswith("TEXT:"):
                        text = target.replace("TEXT:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), '{text.lower()}')]")))
                    elif target.startswith("INSTANCE:"):
                        instance_name = target.replace("INSTANCE:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(@class, '{instance_name}')]")))
                    else:
                        element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, target)))
                    element.click()
    
                elif action == "sendKeys":
                    if target.startswith("TEXT:"):
                        text = target.replace("TEXT:", "").strip()
                        element = wait.until(EC.presence_of_element_located((By.XPATH, f"//input[@placeholder='{text}']")))
                    else:
                        element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, target)))
                    element.clear()
                    element.send_keys(value)
    
                elif action == "resizeWindow":
                    width, height = map(int, target.split("x"))
                    driver.set_window_size(width, height)
    
                time.sleep(1)  # Reduce delay for efficiency
    
            except Exception as e:
                screenshot_path = os.path.join(BASE_DIR, "error_screenshot.png")
                driver.save_screenshot(screenshot_path)
>               pytest.fail(f"‚ùå Error in step '{step}': {e}. Screenshot saved at {screenshot_path}")
E               Failed: ‚ùå Error in step '{'action': 'click', 'target': "[data-testid='Groceries']"}': Message: 
E               Stacktrace:
E               #0 0x563bd06afffa <unknown>
E               #1 0x563bd016e970 <unknown>
E               #2 0x563bd01c0385 <unknown>
E               #3 0x563bd01c05b1 <unknown>
E               #4 0x563bd020f3c4 <unknown>
E               #5 0x563bd01e62bd <unknown>
E               #6 0x563bd020c70c <unknown>
E               #7 0x563bd01e6063 <unknown>
E               #8 0x563bd01b2328 <unknown>
E               #9 0x563bd01b3491 <unknown>
E               #10 0x563bd067742b <unknown>
E               #11 0x563bd067b2ec <unknown>
E               #12 0x563bd065ea22 <unknown>
E               #13 0x563bd067be64 <unknown>
E               #14 0x563bd0642bef <unknown>
E               #15 0x563bd069e558 <unknown>
E               #16 0x563bd069e736 <unknown>
E               #17 0x563bd06aee76 <unknown>
E               #18 0x7fb014e9caa4 <unknown>
E               #19 0x7fb014f29c3c <unknown>
E               . Screenshot saved at /home/runner/work/HackNUthon-rapidops/HackNUthon-rapidops/Selenium-test/error_screenshot.png

Selenium-test/app.py:86: Failed
----------------------------- Captured stdout call -----------------------------

üöÄ Executing: Homepage Category Navigation
_____________________ test_execute_test_case[9-test_case9] _____________________

driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4d2a2112c0574167d478b6c5eed4be11")>
test_case_index = 9
test_case = {'description': "Verify the 'View All' button functionality on product sections.", 'expected_result': 'Navigates to th...: [{'action': 'click', 'target': "[data-testid='View All']"}], 'test_name': "Homepage 'View All' Button Functionality"}

    @pytest.mark.parametrize("test_case_index, test_case", enumerate(test_cases))
    def test_execute_test_case(driver, test_case_index, test_case):
        """Run each test case from JSON, marking certain ones as passed without execution."""
    
        # Mark test cases 2 and 3 (index 1 and 2) as "skipped but passed"
        if test_case_index in [1, 2]:
            print(f"‚úÖ Skipping {test_case['test_name']} (index {test_case_index}) but marking as passed.")
            return  # Exit without failing or skipping
    
        print(f"\nüöÄ Executing: {test_case['test_name']}")
        driver.get(BASE_URL)
        wait = WebDriverWait(driver, 15)  # Increased wait time for dynamic elements
    
        # Ensure page is fully loaded
        wait.until(lambda d: d.execute_script('return document.readyState') == 'complete')
    
        for step in test_case['steps']:
            action = step.get("action")
            target = step.get("target")
            value = step.get("value", "")
    
            try:
                if action == "click":
                    if target.startswith("TEXT:"):
                        text = target.replace("TEXT:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), '{text.lower()}')]")))
                    elif target.startswith("INSTANCE:"):
                        instance_name = target.replace("INSTANCE:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(@class, '{instance_name}')]")))
                    else:
>                       element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, target)))

Selenium-test/app.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="4d2a2112c0574167d478b6c5eed4be11")>
method = <function element_to_be_clickable.<locals>._predicate at 0x7fb15badcb80>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        ----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       #0 0x563bd06afffa <unknown>
E       #1 0x563bd016e970 <unknown>
E       #2 0x563bd01c0385 <unknown>
E       #3 0x563bd01c05b1 <unknown>
E       #4 0x563bd020f3c4 <unknown>
E       #5 0x563bd01e62bd <unknown>
E       #6 0x563bd020c70c <unknown>
E       #7 0x563bd01e6063 <unknown>
E       #8 0x563bd01b2328 <unknown>
E       #9 0x563bd01b3491 <unknown>
E       #10 0x563bd067742b <unknown>
E       #11 0x563bd067b2ec <unknown>
E       #12 0x563bd065ea22 <unknown>
E       #13 0x563bd067be64 <unknown>
E       #14 0x563bd0642bef <unknown>
E       #15 0x563bd069e558 <unknown>
E       #16 0x563bd069e736 <unknown>
E       #17 0x563bd06aee76 <unknown>
E       #18 0x7fb014e9caa4 <unknown>
E       #19 0x7fb014f29c3c <unknown>

/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException

During handling of the above exception, another exception occurred:

driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="4d2a2112c0574167d478b6c5eed4be11")>
test_case_index = 9
test_case = {'description': "Verify the 'View All' button functionality on product sections.", 'expected_result': 'Navigates to th...: [{'action': 'click', 'target': "[data-testid='View All']"}], 'test_name': "Homepage 'View All' Button Functionality"}

    @pytest.mark.parametrize("test_case_index, test_case", enumerate(test_cases))
    def test_execute_test_case(driver, test_case_index, test_case):
        """Run each test case from JSON, marking certain ones as passed without execution."""
    
        # Mark test cases 2 and 3 (index 1 and 2) as "skipped but passed"
        if test_case_index in [1, 2]:
            print(f"‚úÖ Skipping {test_case['test_name']} (index {test_case_index}) but marking as passed.")
            return  # Exit without failing or skipping
    
        print(f"\nüöÄ Executing: {test_case['test_name']}")
        driver.get(BASE_URL)
        wait = WebDriverWait(driver, 15)  # Increased wait time for dynamic elements
    
        # Ensure page is fully loaded
        wait.until(lambda d: d.execute_script('return document.readyState') == 'complete')
    
        for step in test_case['steps']:
            action = step.get("action")
            target = step.get("target")
            value = step.get("value", "")
    
            try:
                if action == "click":
                    if target.startswith("TEXT:"):
                        text = target.replace("TEXT:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), '{text.lower()}')]")))
                    elif target.startswith("INSTANCE:"):
                        instance_name = target.replace("INSTANCE:", "").strip()
                        element = wait.until(EC.element_to_be_clickable((By.XPATH, f"//*[contains(@class, '{instance_name}')]")))
                    else:
                        element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, target)))
                    element.click()
    
                elif action == "sendKeys":
                    if target.startswith("TEXT:"):
                        text = target.replace("TEXT:", "").strip()
                        element = wait.until(EC.presence_of_element_located((By.XPATH, f"//input[@placeholder='{text}']")))
                    else:
                        element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, target)))
                    element.clear()
                    element.send_keys(value)
    
                elif action == "resizeWindow":
                    width, height = map(int, target.split("x"))
                    driver.set_window_size(width, height)
    
                time.sleep(1)  # Reduce delay for efficiency
    
            except Exception as e:
                screenshot_path = os.path.join(BASE_DIR, "error_screenshot.png")
                driver.save_screenshot(screenshot_path)
>               pytest.fail(f"‚ùå Error in step '{step}': {e}. Screenshot saved at {screenshot_path}")
E               Failed: ‚ùå Error in step '{'action': 'click', 'target': "[data-testid='View All']"}': Message: 
E               Stacktrace:
E               #0 0x563bd06afffa <unknown>
E               #1 0x563bd016e970 <unknown>
E               #2 0x563bd01c0385 <unknown>
E               #3 0x563bd01c05b1 <unknown>
E               #4 0x563bd020f3c4 <unknown>
E               #5 0x563bd01e62bd <unknown>
E               #6 0x563bd020c70c <unknown>
E               #7 0x563bd01e6063 <unknown>
E               #8 0x563bd01b2328 <unknown>
E               #9 0x563bd01b3491 <unknown>
E               #10 0x563bd067742b <unknown>
E               #11 0x563bd067b2ec <unknown>
E               #12 0x563bd065ea22 <unknown>
E               #13 0x563bd067be64 <unknown>
E               #14 0x563bd0642bef <unknown>
E               #15 0x563bd069e558 <unknown>
E               #16 0x563bd069e736 <unknown>
E               #17 0x563bd06aee76 <unknown>
E               #18 0x7fb014e9caa4 <unknown>
E               #19 0x7fb014f29c3c <unknown>
E               . Screenshot saved at /home/runner/work/HackNUthon-rapidops/HackNUthon-rapidops/Selenium-test/error_screenshot.png

Selenium-test/app.py:86: Failed
----------------------------- Captured stdout call -----------------------------

üöÄ Executing: Homepage 'View All' Button Functionality
--------------------------------- JSON report ----------------------------------
report saved to: logs/ui_report.json
- Generated html report: file:///home/runner/work/HackNUthon-rapidops/HackNUthon-rapidops/logs/ui_report.html -
=========================== short test summary info ============================
FAILED Selenium-test/app.py::test_execute_test_case[3-test_case3] - Failed: ‚ùå Error in step '{'action': 'click', 'target': "[data-testid='Login now']"}': Message: 
Stacktrace:
#0 0x563bd06afffa <unknown>
#1 0x563bd016e970 <unknown>
#2 0x563bd01c0385 <unknown>
#3 0x563bd01c05b1 <unknown>
#4 0x563bd020f3c4 <unknown>
#5 0x563bd01e62bd <unknown>
#6 0x563bd020c70c <unknown>
#7 0x563bd01e6063 <unknown>
#8 0x563bd01b2328 <unknown>
#9 0x563bd01b3491 <unknown>
#10 0x563bd067742b <unknown>
#11 0x563bd067b2ec <unknown>
#12 0x563bd065ea22 <unknown>
#13 0x563bd067be64 <unknown>
#14 0x563bd0642bef <unknown>
#15 0x563bd069e558 <unknown>
#16 0x563bd069e736 <unknown>
#17 0x563bd06aee76 <unknown>
#18 0x7fb014e9caa4 <unknown>
#19 0x7fb014f29c3c <unknown>
. Screenshot saved at /home/runner/work/HackNUthon-rapidops/HackNUthon-rapidops/Selenium-test/error_screenshot.png
FAILED Selenium-test/app.py::test_execute_test_case[4-test_case4] - Failed: ‚ùå Error in step '{'action': 'click', 'target': "[data-testid='Icon/eye']"}': Message: 
Stacktrace:
#0 0x563bd06afffa <unknown>
#1 0x563bd016e970 <unknown>
#2 0x563bd01c0385 <unknown>
#3 0x563bd01c05b1 <unknown>
#4 0x563bd020f3c4 <unknown>
#5 0x563bd01e62bd <unknown>
#6 0x563bd020c70c <unknown>
#7 0x563bd01e6063 <unknown>
#8 0x563bd01b2328 <unknown>
#9 0x563bd01b3491 <unknown>
#10 0x563bd067742b <unknown>
#11 0x563bd067b2ec <unknown>
#12 0x563bd065ea22 <unknown>
#13 0x563bd067be64 <unknown>
#14 0x563bd0642bef <unknown>
#15 0x563bd069e558 <unknown>
#16 0x563bd069e736 <unknown>
#17 0x563bd06aee76 <unknown>
#18 0x7fb014e9caa4 <unknown>
#19 0x7fb014f29c3c <unknown>
. Screenshot saved at /home/runner/work/HackNUthon-rapidops/HackNUthon-rapidops/Selenium-test/error_screenshot.png
FAILED Selenium-test/app.py::test_execute_test_case[5-test_case5] - Failed: ‚ùå Error in step '{'action': 'click', 'target': "[data-testid='Sign up']"}': Message: 
Stacktrace:
#0 0x563bd06afffa <unknown>
#1 0x563bd016e970 <unknown>
#2 0x563bd01c0385 <unknown>
#3 0x563bd01c05b1 <unknown>
#4 0x563bd020f3c4 <unknown>
#5 0x563bd01e62bd <unknown>
#6 0x563bd020c70c <unknown>
#7 0x563bd01e6063 <unknown>
#8 0x563bd01b2328 <unknown>
#9 0x563bd01b3491 <unknown>
#10 0x563bd067742b <unknown>
#11 0x563bd067b2ec <unknown>
#12 0x563bd065ea22 <unknown>
#13 0x563bd067be64 <unknown>
#14 0x563bd0642bef <unknown>
#15 0x563bd069e558 <unknown>
#16 0x563bd069e736 <unknown>
#17 0x563bd06aee76 <unknown>
#18 0x7fb014e9caa4 <unknown>
#19 0x7fb014f29c3c <unknown>
. Screenshot saved at /home/runner/work/HackNUthon-rapidops/HackNUthon-rapidops/Selenium-test/error_screenshot.png
FAILED Selenium-test/app.py::test_execute_test_case[6-test_case6] - Failed: ‚ùå Error in step '{'action': 'click', 'target': "[data-testid='Arrow - Right 3']"}': Message: 
Stacktrace:
#0 0x563bd06afffa <unknown>
#1 0x563bd016e970 <unknown>
#2 0x563bd01c0385 <unknown>
#3 0x563bd01c05b1 <unknown>
#4 0x563bd020f3c4 <unknown>
#5 0x563bd01e62bd <unknown>
#6 0x563bd020c70c <unknown>
#7 0x563bd01e6063 <unknown>
#8 0x563bd01b2328 <unknown>
#9 0x563bd01b3491 <unknown>
#10 0x563bd067742b <unknown>
#11 0x563bd067b2ec <unknown>
#12 0x563bd065ea22 <unknown>
#13 0x563bd067be64 <unknown>
#14 0x563bd0642bef <unknown>
#15 0x563bd069e558 <unknown>
#16 0x563bd069e736 <unknown>
#17 0x563bd06aee76 <unknown>
#18 0x7fb014e9caa4 <unknown>
#19 0x7fb014f29c3c <unknown>
. Screenshot saved at /home/runner/work/HackNUthon-rapidops/HackNUthon-rapidops/Selenium-test/error_screenshot.png
FAILED Selenium-test/app.py::test_execute_test_case[8-test_case8] - Failed: ‚ùå Error in step '{'action': 'click', 'target': "[data-testid='Groceries']"}': Message: 
Stacktrace:
#0 0x563bd06afffa <unknown>
#1 0x563bd016e970 <unknown>
#2 0x563bd01c0385 <unknown>
#3 0x563bd01c05b1 <unknown>
#4 0x563bd020f3c4 <unknown>
#5 0x563bd01e62bd <unknown>
#6 0x563bd020c70c <unknown>
#7 0x563bd01e6063 <unknown>
#8 0x563bd01b2328 <unknown>
#9 0x563bd01b3491 <unknown>
#10 0x563bd067742b <unknown>
#11 0x563bd067b2ec <unknown>
#12 0x563bd065ea22 <unknown>
#13 0x563bd067be64 <unknown>
#14 0x563bd0642bef <unknown>
#15 0x563bd069e558 <unknown>
#16 0x563bd069e736 <unknown>
#17 0x563bd06aee76 <unknown>
#18 0x7fb014e9caa4 <unknown>
#19 0x7fb014f29c3c <unknown>
. Screenshot saved at /home/runner/work/HackNUthon-rapidops/HackNUthon-rapidops/Selenium-test/error_screenshot.png
FAILED Selenium-test/app.py::test_execute_test_case[9-test_case9] - Failed: ‚ùå Error in step '{'action': 'click', 'target': "[data-testid='View All']"}': Message: 
Stacktrace:
#0 0x563bd06afffa <unknown>
#1 0x563bd016e970 <unknown>
#2 0x563bd01c0385 <unknown>
#3 0x563bd01c05b1 <unknown>
#4 0x563bd020f3c4 <unknown>
#5 0x563bd01e62bd <unknown>
#6 0x563bd020c70c <unknown>
#7 0x563bd01e6063 <unknown>
#8 0x563bd01b2328 <unknown>
#9 0x563bd01b3491 <unknown>
#10 0x563bd067742b <unknown>
#11 0x563bd067b2ec <unknown>
#12 0x563bd065ea22 <unknown>
#13 0x563bd067be64 <unknown>
#14 0x563bd0642bef <unknown>
#15 0x563bd069e558 <unknown>
#16 0x563bd069e736 <unknown>
#17 0x563bd06aee76 <unknown>
#18 0x7fb014e9caa4 <unknown>
#19 0x7fb014f29c3c <unknown>
. Screenshot saved at /home/runner/work/HackNUthon-rapidops/HackNUthon-rapidops/Selenium-test/error_screenshot.png
=================== 6 failed, 4 passed in 114.97s (0:01:54) ====================
