{"created": 1743344876.829, "duration": 1.5629160404205322, "exitcode": 1, "root": "/home/runner/work/HackNUthon-rapidops/HackNUthon-rapidops", "environment": {}, "summary": {"error": 10, "total": 10, "collected": 10}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "Selenium-test/app.py", "type": "Module"}]}, {"nodeid": "Selenium-test/app.py", "outcome": "passed", "result": [{"nodeid": "Selenium-test/app.py::test_execute_test_case[0-test_case0]", "type": "Function", "lineno": 34}, {"nodeid": "Selenium-test/app.py::test_execute_test_case[1-test_case1]", "type": "Function", "lineno": 34}, {"nodeid": "Selenium-test/app.py::test_execute_test_case[2-test_case2]", "type": "Function", "lineno": 34}, {"nodeid": "Selenium-test/app.py::test_execute_test_case[3-test_case3]", "type": "Function", "lineno": 34}, {"nodeid": "Selenium-test/app.py::test_execute_test_case[4-test_case4]", "type": "Function", "lineno": 34}, {"nodeid": "Selenium-test/app.py::test_execute_test_case[5-test_case5]", "type": "Function", "lineno": 34}, {"nodeid": "Selenium-test/app.py::test_execute_test_case[6-test_case6]", "type": "Function", "lineno": 34}, {"nodeid": "Selenium-test/app.py::test_execute_test_case[7-test_case7]", "type": "Function", "lineno": 34}, {"nodeid": "Selenium-test/app.py::test_execute_test_case[8-test_case8]", "type": "Function", "lineno": 34}, {"nodeid": "Selenium-test/app.py::test_execute_test_case[9-test_case9]", "type": "Function", "lineno": 34}]}], "tests": [{"nodeid": "Selenium-test/app.py::test_execute_test_case[0-test_case0]", "lineno": 34, "outcome": "error", "keywords": ["test_execute_test_case[0-test_case0]", "parametrize", "pytestmark", "0-test_case0", "app.py", "Selenium-test", "HackNUthon-rapidops", ""], "setup": {"duration": 1.041475319, "outcome": "failed", "crash": {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom unknown error: no chrome binary at /usr/bin/google-chrome\nStacktrace:\n#0 0x55edb215966a <unknown>\n#1 0x55edb1c2ad90 <unknown>\n#2 0x55edb1c61887 <unknown>\n#3 0x55edb1c5fc98 <unknown>\n#4 0x55edb1cafb30 <unknown>\n#5 0x55edb1caf0c6 <unknown>\n#6 0x55edb1ca1293 <unknown>\n#7 0x55edb1c6d6ba <unknown>\n#8 0x55edb1c6e821 <unknown>\n#9 0x55edb212050f <unknown>\n#10 0x55edb212459d <unknown>\n#11 0x55edb2107602 <unknown>\n#12 0x55edb2124d0e <unknown>\n#13 0x55edb20ed91e <unknown>\n#14 0x55edb2147928 <unknown>\n#15 0x55edb2147b33 <unknown>\n#16 0x55edb21582dc <unknown>\n#17 0x7fb0a812dac3 <unknown>"}, "traceback": [{"path": "Selenium-test/app.py", "lineno": 31, "message": ""}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py", "lineno": 45, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py", "lineno": 66, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 250, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 342, "message": "in start_session"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 429, "message": "in execute"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "SessionNotCreatedException"}], "longrepr": "@pytest.fixture(scope=\"module\")\n    def driver():\n        \"\"\"Setup and teardown of Selenium WebDriver with headless mode.\"\"\"\n        options = Options()\n        options.add_argument(\"--headless\")  # Run in headless mode for GitHub Actions\n        options.add_argument(\"--no-sandbox\")\n        options.add_argument(\"--disable-dev-shm-usage\")\n        options.add_argument(\"--disable-gpu\")\n        options.add_argument(\"--window-size=1920,1080\")\n    \n>       driver = webdriver.Chrome(options=options)\n\nSelenium-test/app.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4fa0063100>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom unknown error:...\\\\n#15 0x55edb2147b33 \\\\u003Cunknown>\\\\n#16 0x55edb21582dc \\\\u003Cunknown>\\\\n#17 0x7fb0a812dac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from unknown error: no chrome binary at /usr/bin/google-chrome\nE       Stacktrace:\nE       #0 0x55edb215966a <unknown>\nE       #1 0x55edb1c2ad90 <unknown>\nE       #2 0x55edb1c61887 <unknown>\nE       #3 0x55edb1c5fc98 <unknown>\nE       #4 0x55edb1cafb30 <unknown>\nE       #5 0x55edb1caf0c6 <unknown>\nE       #6 0x55edb1ca1293 <unknown>\nE       #7 0x55edb1c6d6ba <unknown>\nE       #8 0x55edb1c6e821 <unknown>\nE       #9 0x55edb212050f <unknown>\nE       #10 0x55edb212459d <unknown>\nE       #11 0x55edb2107602 <unknown>\nE       #12 0x55edb2124d0e <unknown>\nE       #13 0x55edb20ed91e <unknown>\nE       #14 0x55edb2147928 <unknown>\nE       #15 0x55edb2147b33 <unknown>\nE       #16 0x55edb21582dc <unknown>\nE       #17 0x7fb0a812dac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException"}, "teardown": {"duration": 0.00022508099999640763, "outcome": "passed"}}, {"nodeid": "Selenium-test/app.py::test_execute_test_case[1-test_case1]", "lineno": 34, "outcome": "error", "keywords": ["test_execute_test_case[1-test_case1]", "parametrize", "pytestmark", "1-test_case1", "app.py", "Selenium-test", "HackNUthon-rapidops", ""], "setup": {"duration": 0.00022885800001404277, "outcome": "failed", "crash": {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom unknown error: no chrome binary at /usr/bin/google-chrome\nStacktrace:\n#0 0x55edb215966a <unknown>\n#1 0x55edb1c2ad90 <unknown>\n#2 0x55edb1c61887 <unknown>\n#3 0x55edb1c5fc98 <unknown>\n#4 0x55edb1cafb30 <unknown>\n#5 0x55edb1caf0c6 <unknown>\n#6 0x55edb1ca1293 <unknown>\n#7 0x55edb1c6d6ba <unknown>\n#8 0x55edb1c6e821 <unknown>\n#9 0x55edb212050f <unknown>\n#10 0x55edb212459d <unknown>\n#11 0x55edb2107602 <unknown>\n#12 0x55edb2124d0e <unknown>\n#13 0x55edb20ed91e <unknown>\n#14 0x55edb2147928 <unknown>\n#15 0x55edb2147b33 <unknown>\n#16 0x55edb21582dc <unknown>\n#17 0x7fb0a812dac3 <unknown>"}, "traceback": [{"path": "Selenium-test/app.py", "lineno": 31, "message": ""}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py", "lineno": 45, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py", "lineno": 66, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 250, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 342, "message": "in start_session"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 429, "message": "in execute"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "SessionNotCreatedException"}], "longrepr": "@pytest.fixture(scope=\"module\")\n    def driver():\n        \"\"\"Setup and teardown of Selenium WebDriver with headless mode.\"\"\"\n        options = Options()\n        options.add_argument(\"--headless\")  # Run in headless mode for GitHub Actions\n        options.add_argument(\"--no-sandbox\")\n        options.add_argument(\"--disable-dev-shm-usage\")\n        options.add_argument(\"--disable-gpu\")\n        options.add_argument(\"--window-size=1920,1080\")\n    \n>       driver = webdriver.Chrome(options=options)\n\nSelenium-test/app.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4fa0063100>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom unknown error:...\\\\n#15 0x55edb2147b33 \\\\u003Cunknown>\\\\n#16 0x55edb21582dc \\\\u003Cunknown>\\\\n#17 0x7fb0a812dac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from unknown error: no chrome binary at /usr/bin/google-chrome\nE       Stacktrace:\nE       #0 0x55edb215966a <unknown>\nE       #1 0x55edb1c2ad90 <unknown>\nE       #2 0x55edb1c61887 <unknown>\nE       #3 0x55edb1c5fc98 <unknown>\nE       #4 0x55edb1cafb30 <unknown>\nE       #5 0x55edb1caf0c6 <unknown>\nE       #6 0x55edb1ca1293 <unknown>\nE       #7 0x55edb1c6d6ba <unknown>\nE       #8 0x55edb1c6e821 <unknown>\nE       #9 0x55edb212050f <unknown>\nE       #10 0x55edb212459d <unknown>\nE       #11 0x55edb2107602 <unknown>\nE       #12 0x55edb2124d0e <unknown>\nE       #13 0x55edb20ed91e <unknown>\nE       #14 0x55edb2147928 <unknown>\nE       #15 0x55edb2147b33 <unknown>\nE       #16 0x55edb21582dc <unknown>\nE       #17 0x7fb0a812dac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException"}, "teardown": {"duration": 0.00018372300002056363, "outcome": "passed"}}, {"nodeid": "Selenium-test/app.py::test_execute_test_case[2-test_case2]", "lineno": 34, "outcome": "error", "keywords": ["test_execute_test_case[2-test_case2]", "parametrize", "pytestmark", "2-test_case2", "app.py", "Selenium-test", "HackNUthon-rapidops", ""], "setup": {"duration": 0.00017603899999585337, "outcome": "failed", "crash": {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom unknown error: no chrome binary at /usr/bin/google-chrome\nStacktrace:\n#0 0x55edb215966a <unknown>\n#1 0x55edb1c2ad90 <unknown>\n#2 0x55edb1c61887 <unknown>\n#3 0x55edb1c5fc98 <unknown>\n#4 0x55edb1cafb30 <unknown>\n#5 0x55edb1caf0c6 <unknown>\n#6 0x55edb1ca1293 <unknown>\n#7 0x55edb1c6d6ba <unknown>\n#8 0x55edb1c6e821 <unknown>\n#9 0x55edb212050f <unknown>\n#10 0x55edb212459d <unknown>\n#11 0x55edb2107602 <unknown>\n#12 0x55edb2124d0e <unknown>\n#13 0x55edb20ed91e <unknown>\n#14 0x55edb2147928 <unknown>\n#15 0x55edb2147b33 <unknown>\n#16 0x55edb21582dc <unknown>\n#17 0x7fb0a812dac3 <unknown>"}, "traceback": [{"path": "Selenium-test/app.py", "lineno": 31, "message": ""}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py", "lineno": 45, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py", "lineno": 66, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 250, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 342, "message": "in start_session"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 429, "message": "in execute"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "SessionNotCreatedException"}], "longrepr": "@pytest.fixture(scope=\"module\")\n    def driver():\n        \"\"\"Setup and teardown of Selenium WebDriver with headless mode.\"\"\"\n        options = Options()\n        options.add_argument(\"--headless\")  # Run in headless mode for GitHub Actions\n        options.add_argument(\"--no-sandbox\")\n        options.add_argument(\"--disable-dev-shm-usage\")\n        options.add_argument(\"--disable-gpu\")\n        options.add_argument(\"--window-size=1920,1080\")\n    \n>       driver = webdriver.Chrome(options=options)\n\nSelenium-test/app.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4fa0063100>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom unknown error:...\\\\n#15 0x55edb2147b33 \\\\u003Cunknown>\\\\n#16 0x55edb21582dc \\\\u003Cunknown>\\\\n#17 0x7fb0a812dac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from unknown error: no chrome binary at /usr/bin/google-chrome\nE       Stacktrace:\nE       #0 0x55edb215966a <unknown>\nE       #1 0x55edb1c2ad90 <unknown>\nE       #2 0x55edb1c61887 <unknown>\nE       #3 0x55edb1c5fc98 <unknown>\nE       #4 0x55edb1cafb30 <unknown>\nE       #5 0x55edb1caf0c6 <unknown>\nE       #6 0x55edb1ca1293 <unknown>\nE       #7 0x55edb1c6d6ba <unknown>\nE       #8 0x55edb1c6e821 <unknown>\nE       #9 0x55edb212050f <unknown>\nE       #10 0x55edb212459d <unknown>\nE       #11 0x55edb2107602 <unknown>\nE       #12 0x55edb2124d0e <unknown>\nE       #13 0x55edb20ed91e <unknown>\nE       #14 0x55edb2147928 <unknown>\nE       #15 0x55edb2147b33 <unknown>\nE       #16 0x55edb21582dc <unknown>\nE       #17 0x7fb0a812dac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException"}, "teardown": {"duration": 0.0001710500000058346, "outcome": "passed"}}, {"nodeid": "Selenium-test/app.py::test_execute_test_case[3-test_case3]", "lineno": 34, "outcome": "error", "keywords": ["test_execute_test_case[3-test_case3]", "parametrize", "pytestmark", "3-test_case3", "app.py", "Selenium-test", "HackNUthon-rapidops", ""], "setup": {"duration": 0.00016784399997504806, "outcome": "failed", "crash": {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom unknown error: no chrome binary at /usr/bin/google-chrome\nStacktrace:\n#0 0x55edb215966a <unknown>\n#1 0x55edb1c2ad90 <unknown>\n#2 0x55edb1c61887 <unknown>\n#3 0x55edb1c5fc98 <unknown>\n#4 0x55edb1cafb30 <unknown>\n#5 0x55edb1caf0c6 <unknown>\n#6 0x55edb1ca1293 <unknown>\n#7 0x55edb1c6d6ba <unknown>\n#8 0x55edb1c6e821 <unknown>\n#9 0x55edb212050f <unknown>\n#10 0x55edb212459d <unknown>\n#11 0x55edb2107602 <unknown>\n#12 0x55edb2124d0e <unknown>\n#13 0x55edb20ed91e <unknown>\n#14 0x55edb2147928 <unknown>\n#15 0x55edb2147b33 <unknown>\n#16 0x55edb21582dc <unknown>\n#17 0x7fb0a812dac3 <unknown>"}, "traceback": [{"path": "Selenium-test/app.py", "lineno": 31, "message": ""}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py", "lineno": 45, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py", "lineno": 66, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 250, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 342, "message": "in start_session"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 429, "message": "in execute"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "SessionNotCreatedException"}], "longrepr": "@pytest.fixture(scope=\"module\")\n    def driver():\n        \"\"\"Setup and teardown of Selenium WebDriver with headless mode.\"\"\"\n        options = Options()\n        options.add_argument(\"--headless\")  # Run in headless mode for GitHub Actions\n        options.add_argument(\"--no-sandbox\")\n        options.add_argument(\"--disable-dev-shm-usage\")\n        options.add_argument(\"--disable-gpu\")\n        options.add_argument(\"--window-size=1920,1080\")\n    \n>       driver = webdriver.Chrome(options=options)\n\nSelenium-test/app.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4fa0063100>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom unknown error:...\\\\n#15 0x55edb2147b33 \\\\u003Cunknown>\\\\n#16 0x55edb21582dc \\\\u003Cunknown>\\\\n#17 0x7fb0a812dac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from unknown error: no chrome binary at /usr/bin/google-chrome\nE       Stacktrace:\nE       #0 0x55edb215966a <unknown>\nE       #1 0x55edb1c2ad90 <unknown>\nE       #2 0x55edb1c61887 <unknown>\nE       #3 0x55edb1c5fc98 <unknown>\nE       #4 0x55edb1cafb30 <unknown>\nE       #5 0x55edb1caf0c6 <unknown>\nE       #6 0x55edb1ca1293 <unknown>\nE       #7 0x55edb1c6d6ba <unknown>\nE       #8 0x55edb1c6e821 <unknown>\nE       #9 0x55edb212050f <unknown>\nE       #10 0x55edb212459d <unknown>\nE       #11 0x55edb2107602 <unknown>\nE       #12 0x55edb2124d0e <unknown>\nE       #13 0x55edb20ed91e <unknown>\nE       #14 0x55edb2147928 <unknown>\nE       #15 0x55edb2147b33 <unknown>\nE       #16 0x55edb21582dc <unknown>\nE       #17 0x7fb0a812dac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException"}, "teardown": {"duration": 0.00017248200001063196, "outcome": "passed"}}, {"nodeid": "Selenium-test/app.py::test_execute_test_case[4-test_case4]", "lineno": 34, "outcome": "error", "keywords": ["test_execute_test_case[4-test_case4]", "parametrize", "pytestmark", "4-test_case4", "app.py", "Selenium-test", "HackNUthon-rapidops", ""], "setup": {"duration": 0.00016828399998303212, "outcome": "failed", "crash": {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom unknown error: no chrome binary at /usr/bin/google-chrome\nStacktrace:\n#0 0x55edb215966a <unknown>\n#1 0x55edb1c2ad90 <unknown>\n#2 0x55edb1c61887 <unknown>\n#3 0x55edb1c5fc98 <unknown>\n#4 0x55edb1cafb30 <unknown>\n#5 0x55edb1caf0c6 <unknown>\n#6 0x55edb1ca1293 <unknown>\n#7 0x55edb1c6d6ba <unknown>\n#8 0x55edb1c6e821 <unknown>\n#9 0x55edb212050f <unknown>\n#10 0x55edb212459d <unknown>\n#11 0x55edb2107602 <unknown>\n#12 0x55edb2124d0e <unknown>\n#13 0x55edb20ed91e <unknown>\n#14 0x55edb2147928 <unknown>\n#15 0x55edb2147b33 <unknown>\n#16 0x55edb21582dc <unknown>\n#17 0x7fb0a812dac3 <unknown>"}, "traceback": [{"path": "Selenium-test/app.py", "lineno": 31, "message": ""}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py", "lineno": 45, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py", "lineno": 66, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 250, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 342, "message": "in start_session"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 429, "message": "in execute"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "SessionNotCreatedException"}], "longrepr": "@pytest.fixture(scope=\"module\")\n    def driver():\n        \"\"\"Setup and teardown of Selenium WebDriver with headless mode.\"\"\"\n        options = Options()\n        options.add_argument(\"--headless\")  # Run in headless mode for GitHub Actions\n        options.add_argument(\"--no-sandbox\")\n        options.add_argument(\"--disable-dev-shm-usage\")\n        options.add_argument(\"--disable-gpu\")\n        options.add_argument(\"--window-size=1920,1080\")\n    \n>       driver = webdriver.Chrome(options=options)\n\nSelenium-test/app.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4fa0063100>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom unknown error:...\\\\n#15 0x55edb2147b33 \\\\u003Cunknown>\\\\n#16 0x55edb21582dc \\\\u003Cunknown>\\\\n#17 0x7fb0a812dac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from unknown error: no chrome binary at /usr/bin/google-chrome\nE       Stacktrace:\nE       #0 0x55edb215966a <unknown>\nE       #1 0x55edb1c2ad90 <unknown>\nE       #2 0x55edb1c61887 <unknown>\nE       #3 0x55edb1c5fc98 <unknown>\nE       #4 0x55edb1cafb30 <unknown>\nE       #5 0x55edb1caf0c6 <unknown>\nE       #6 0x55edb1ca1293 <unknown>\nE       #7 0x55edb1c6d6ba <unknown>\nE       #8 0x55edb1c6e821 <unknown>\nE       #9 0x55edb212050f <unknown>\nE       #10 0x55edb212459d <unknown>\nE       #11 0x55edb2107602 <unknown>\nE       #12 0x55edb2124d0e <unknown>\nE       #13 0x55edb20ed91e <unknown>\nE       #14 0x55edb2147928 <unknown>\nE       #15 0x55edb2147b33 <unknown>\nE       #16 0x55edb21582dc <unknown>\nE       #17 0x7fb0a812dac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException"}, "teardown": {"duration": 0.00016232400000149028, "outcome": "passed"}}, {"nodeid": "Selenium-test/app.py::test_execute_test_case[5-test_case5]", "lineno": 34, "outcome": "error", "keywords": ["test_execute_test_case[5-test_case5]", "parametrize", "pytestmark", "5-test_case5", "app.py", "Selenium-test", "HackNUthon-rapidops", ""], "setup": {"duration": 0.00020050399999149704, "outcome": "failed", "crash": {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom unknown error: no chrome binary at /usr/bin/google-chrome\nStacktrace:\n#0 0x55edb215966a <unknown>\n#1 0x55edb1c2ad90 <unknown>\n#2 0x55edb1c61887 <unknown>\n#3 0x55edb1c5fc98 <unknown>\n#4 0x55edb1cafb30 <unknown>\n#5 0x55edb1caf0c6 <unknown>\n#6 0x55edb1ca1293 <unknown>\n#7 0x55edb1c6d6ba <unknown>\n#8 0x55edb1c6e821 <unknown>\n#9 0x55edb212050f <unknown>\n#10 0x55edb212459d <unknown>\n#11 0x55edb2107602 <unknown>\n#12 0x55edb2124d0e <unknown>\n#13 0x55edb20ed91e <unknown>\n#14 0x55edb2147928 <unknown>\n#15 0x55edb2147b33 <unknown>\n#16 0x55edb21582dc <unknown>\n#17 0x7fb0a812dac3 <unknown>"}, "traceback": [{"path": "Selenium-test/app.py", "lineno": 31, "message": ""}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py", "lineno": 45, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py", "lineno": 66, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 250, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 342, "message": "in start_session"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 429, "message": "in execute"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "SessionNotCreatedException"}], "longrepr": "@pytest.fixture(scope=\"module\")\n    def driver():\n        \"\"\"Setup and teardown of Selenium WebDriver with headless mode.\"\"\"\n        options = Options()\n        options.add_argument(\"--headless\")  # Run in headless mode for GitHub Actions\n        options.add_argument(\"--no-sandbox\")\n        options.add_argument(\"--disable-dev-shm-usage\")\n        options.add_argument(\"--disable-gpu\")\n        options.add_argument(\"--window-size=1920,1080\")\n    \n>       driver = webdriver.Chrome(options=options)\n\nSelenium-test/app.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4fa0063100>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom unknown error:...\\\\n#15 0x55edb2147b33 \\\\u003Cunknown>\\\\n#16 0x55edb21582dc \\\\u003Cunknown>\\\\n#17 0x7fb0a812dac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from unknown error: no chrome binary at /usr/bin/google-chrome\nE       Stacktrace:\nE       #0 0x55edb215966a <unknown>\nE       #1 0x55edb1c2ad90 <unknown>\nE       #2 0x55edb1c61887 <unknown>\nE       #3 0x55edb1c5fc98 <unknown>\nE       #4 0x55edb1cafb30 <unknown>\nE       #5 0x55edb1caf0c6 <unknown>\nE       #6 0x55edb1ca1293 <unknown>\nE       #7 0x55edb1c6d6ba <unknown>\nE       #8 0x55edb1c6e821 <unknown>\nE       #9 0x55edb212050f <unknown>\nE       #10 0x55edb212459d <unknown>\nE       #11 0x55edb2107602 <unknown>\nE       #12 0x55edb2124d0e <unknown>\nE       #13 0x55edb20ed91e <unknown>\nE       #14 0x55edb2147928 <unknown>\nE       #15 0x55edb2147b33 <unknown>\nE       #16 0x55edb21582dc <unknown>\nE       #17 0x7fb0a812dac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException"}, "teardown": {"duration": 0.00018931399998223242, "outcome": "passed"}}, {"nodeid": "Selenium-test/app.py::test_execute_test_case[6-test_case6]", "lineno": 34, "outcome": "error", "keywords": ["test_execute_test_case[6-test_case6]", "parametrize", "pytestmark", "6-test_case6", "app.py", "Selenium-test", "HackNUthon-rapidops", ""], "setup": {"duration": 0.0001713700000038898, "outcome": "failed", "crash": {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom unknown error: no chrome binary at /usr/bin/google-chrome\nStacktrace:\n#0 0x55edb215966a <unknown>\n#1 0x55edb1c2ad90 <unknown>\n#2 0x55edb1c61887 <unknown>\n#3 0x55edb1c5fc98 <unknown>\n#4 0x55edb1cafb30 <unknown>\n#5 0x55edb1caf0c6 <unknown>\n#6 0x55edb1ca1293 <unknown>\n#7 0x55edb1c6d6ba <unknown>\n#8 0x55edb1c6e821 <unknown>\n#9 0x55edb212050f <unknown>\n#10 0x55edb212459d <unknown>\n#11 0x55edb2107602 <unknown>\n#12 0x55edb2124d0e <unknown>\n#13 0x55edb20ed91e <unknown>\n#14 0x55edb2147928 <unknown>\n#15 0x55edb2147b33 <unknown>\n#16 0x55edb21582dc <unknown>\n#17 0x7fb0a812dac3 <unknown>"}, "traceback": [{"path": "Selenium-test/app.py", "lineno": 31, "message": ""}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py", "lineno": 45, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py", "lineno": 66, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 250, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 342, "message": "in start_session"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 429, "message": "in execute"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "SessionNotCreatedException"}], "longrepr": "@pytest.fixture(scope=\"module\")\n    def driver():\n        \"\"\"Setup and teardown of Selenium WebDriver with headless mode.\"\"\"\n        options = Options()\n        options.add_argument(\"--headless\")  # Run in headless mode for GitHub Actions\n        options.add_argument(\"--no-sandbox\")\n        options.add_argument(\"--disable-dev-shm-usage\")\n        options.add_argument(\"--disable-gpu\")\n        options.add_argument(\"--window-size=1920,1080\")\n    \n>       driver = webdriver.Chrome(options=options)\n\nSelenium-test/app.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4fa0063100>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom unknown error:...\\\\n#15 0x55edb2147b33 \\\\u003Cunknown>\\\\n#16 0x55edb21582dc \\\\u003Cunknown>\\\\n#17 0x7fb0a812dac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from unknown error: no chrome binary at /usr/bin/google-chrome\nE       Stacktrace:\nE       #0 0x55edb215966a <unknown>\nE       #1 0x55edb1c2ad90 <unknown>\nE       #2 0x55edb1c61887 <unknown>\nE       #3 0x55edb1c5fc98 <unknown>\nE       #4 0x55edb1cafb30 <unknown>\nE       #5 0x55edb1caf0c6 <unknown>\nE       #6 0x55edb1ca1293 <unknown>\nE       #7 0x55edb1c6d6ba <unknown>\nE       #8 0x55edb1c6e821 <unknown>\nE       #9 0x55edb212050f <unknown>\nE       #10 0x55edb212459d <unknown>\nE       #11 0x55edb2107602 <unknown>\nE       #12 0x55edb2124d0e <unknown>\nE       #13 0x55edb20ed91e <unknown>\nE       #14 0x55edb2147928 <unknown>\nE       #15 0x55edb2147b33 <unknown>\nE       #16 0x55edb21582dc <unknown>\nE       #17 0x7fb0a812dac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException"}, "teardown": {"duration": 0.0002282370000159517, "outcome": "passed"}}, {"nodeid": "Selenium-test/app.py::test_execute_test_case[7-test_case7]", "lineno": 34, "outcome": "error", "keywords": ["test_execute_test_case[7-test_case7]", "parametrize", "pytestmark", "7-test_case7", "app.py", "Selenium-test", "HackNUthon-rapidops", ""], "setup": {"duration": 0.00020845000000235814, "outcome": "failed", "crash": {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom unknown error: no chrome binary at /usr/bin/google-chrome\nStacktrace:\n#0 0x55edb215966a <unknown>\n#1 0x55edb1c2ad90 <unknown>\n#2 0x55edb1c61887 <unknown>\n#3 0x55edb1c5fc98 <unknown>\n#4 0x55edb1cafb30 <unknown>\n#5 0x55edb1caf0c6 <unknown>\n#6 0x55edb1ca1293 <unknown>\n#7 0x55edb1c6d6ba <unknown>\n#8 0x55edb1c6e821 <unknown>\n#9 0x55edb212050f <unknown>\n#10 0x55edb212459d <unknown>\n#11 0x55edb2107602 <unknown>\n#12 0x55edb2124d0e <unknown>\n#13 0x55edb20ed91e <unknown>\n#14 0x55edb2147928 <unknown>\n#15 0x55edb2147b33 <unknown>\n#16 0x55edb21582dc <unknown>\n#17 0x7fb0a812dac3 <unknown>"}, "traceback": [{"path": "Selenium-test/app.py", "lineno": 31, "message": ""}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py", "lineno": 45, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py", "lineno": 66, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 250, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 342, "message": "in start_session"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 429, "message": "in execute"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "SessionNotCreatedException"}], "longrepr": "@pytest.fixture(scope=\"module\")\n    def driver():\n        \"\"\"Setup and teardown of Selenium WebDriver with headless mode.\"\"\"\n        options = Options()\n        options.add_argument(\"--headless\")  # Run in headless mode for GitHub Actions\n        options.add_argument(\"--no-sandbox\")\n        options.add_argument(\"--disable-dev-shm-usage\")\n        options.add_argument(\"--disable-gpu\")\n        options.add_argument(\"--window-size=1920,1080\")\n    \n>       driver = webdriver.Chrome(options=options)\n\nSelenium-test/app.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4fa0063100>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom unknown error:...\\\\n#15 0x55edb2147b33 \\\\u003Cunknown>\\\\n#16 0x55edb21582dc \\\\u003Cunknown>\\\\n#17 0x7fb0a812dac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from unknown error: no chrome binary at /usr/bin/google-chrome\nE       Stacktrace:\nE       #0 0x55edb215966a <unknown>\nE       #1 0x55edb1c2ad90 <unknown>\nE       #2 0x55edb1c61887 <unknown>\nE       #3 0x55edb1c5fc98 <unknown>\nE       #4 0x55edb1cafb30 <unknown>\nE       #5 0x55edb1caf0c6 <unknown>\nE       #6 0x55edb1ca1293 <unknown>\nE       #7 0x55edb1c6d6ba <unknown>\nE       #8 0x55edb1c6e821 <unknown>\nE       #9 0x55edb212050f <unknown>\nE       #10 0x55edb212459d <unknown>\nE       #11 0x55edb2107602 <unknown>\nE       #12 0x55edb2124d0e <unknown>\nE       #13 0x55edb20ed91e <unknown>\nE       #14 0x55edb2147928 <unknown>\nE       #15 0x55edb2147b33 <unknown>\nE       #16 0x55edb21582dc <unknown>\nE       #17 0x7fb0a812dac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException"}, "teardown": {"duration": 0.0001543490000130987, "outcome": "passed"}}, {"nodeid": "Selenium-test/app.py::test_execute_test_case[8-test_case8]", "lineno": 34, "outcome": "error", "keywords": ["test_execute_test_case[8-test_case8]", "parametrize", "pytestmark", "8-test_case8", "app.py", "Selenium-test", "HackNUthon-rapidops", ""], "setup": {"duration": 0.00018489600000748396, "outcome": "failed", "crash": {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom unknown error: no chrome binary at /usr/bin/google-chrome\nStacktrace:\n#0 0x55edb215966a <unknown>\n#1 0x55edb1c2ad90 <unknown>\n#2 0x55edb1c61887 <unknown>\n#3 0x55edb1c5fc98 <unknown>\n#4 0x55edb1cafb30 <unknown>\n#5 0x55edb1caf0c6 <unknown>\n#6 0x55edb1ca1293 <unknown>\n#7 0x55edb1c6d6ba <unknown>\n#8 0x55edb1c6e821 <unknown>\n#9 0x55edb212050f <unknown>\n#10 0x55edb212459d <unknown>\n#11 0x55edb2107602 <unknown>\n#12 0x55edb2124d0e <unknown>\n#13 0x55edb20ed91e <unknown>\n#14 0x55edb2147928 <unknown>\n#15 0x55edb2147b33 <unknown>\n#16 0x55edb21582dc <unknown>\n#17 0x7fb0a812dac3 <unknown>"}, "traceback": [{"path": "Selenium-test/app.py", "lineno": 31, "message": ""}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py", "lineno": 45, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py", "lineno": 66, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 250, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 342, "message": "in start_session"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 429, "message": "in execute"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "SessionNotCreatedException"}], "longrepr": "@pytest.fixture(scope=\"module\")\n    def driver():\n        \"\"\"Setup and teardown of Selenium WebDriver with headless mode.\"\"\"\n        options = Options()\n        options.add_argument(\"--headless\")  # Run in headless mode for GitHub Actions\n        options.add_argument(\"--no-sandbox\")\n        options.add_argument(\"--disable-dev-shm-usage\")\n        options.add_argument(\"--disable-gpu\")\n        options.add_argument(\"--window-size=1920,1080\")\n    \n>       driver = webdriver.Chrome(options=options)\n\nSelenium-test/app.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4fa0063100>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom unknown error:...\\\\n#15 0x55edb2147b33 \\\\u003Cunknown>\\\\n#16 0x55edb21582dc \\\\u003Cunknown>\\\\n#17 0x7fb0a812dac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from unknown error: no chrome binary at /usr/bin/google-chrome\nE       Stacktrace:\nE       #0 0x55edb215966a <unknown>\nE       #1 0x55edb1c2ad90 <unknown>\nE       #2 0x55edb1c61887 <unknown>\nE       #3 0x55edb1c5fc98 <unknown>\nE       #4 0x55edb1cafb30 <unknown>\nE       #5 0x55edb1caf0c6 <unknown>\nE       #6 0x55edb1ca1293 <unknown>\nE       #7 0x55edb1c6d6ba <unknown>\nE       #8 0x55edb1c6e821 <unknown>\nE       #9 0x55edb212050f <unknown>\nE       #10 0x55edb212459d <unknown>\nE       #11 0x55edb2107602 <unknown>\nE       #12 0x55edb2124d0e <unknown>\nE       #13 0x55edb20ed91e <unknown>\nE       #14 0x55edb2147928 <unknown>\nE       #15 0x55edb2147b33 <unknown>\nE       #16 0x55edb21582dc <unknown>\nE       #17 0x7fb0a812dac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException"}, "teardown": {"duration": 0.000174426000000949, "outcome": "passed"}}, {"nodeid": "Selenium-test/app.py::test_execute_test_case[9-test_case9]", "lineno": 34, "outcome": "error", "keywords": ["test_execute_test_case[9-test_case9]", "parametrize", "pytestmark", "9-test_case9", "app.py", "Selenium-test", "HackNUthon-rapidops", ""], "setup": {"duration": 0.00017511699999772645, "outcome": "failed", "crash": {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom unknown error: no chrome binary at /usr/bin/google-chrome\nStacktrace:\n#0 0x55edb215966a <unknown>\n#1 0x55edb1c2ad90 <unknown>\n#2 0x55edb1c61887 <unknown>\n#3 0x55edb1c5fc98 <unknown>\n#4 0x55edb1cafb30 <unknown>\n#5 0x55edb1caf0c6 <unknown>\n#6 0x55edb1ca1293 <unknown>\n#7 0x55edb1c6d6ba <unknown>\n#8 0x55edb1c6e821 <unknown>\n#9 0x55edb212050f <unknown>\n#10 0x55edb212459d <unknown>\n#11 0x55edb2107602 <unknown>\n#12 0x55edb2124d0e <unknown>\n#13 0x55edb20ed91e <unknown>\n#14 0x55edb2147928 <unknown>\n#15 0x55edb2147b33 <unknown>\n#16 0x55edb21582dc <unknown>\n#17 0x7fb0a812dac3 <unknown>"}, "traceback": [{"path": "Selenium-test/app.py", "lineno": 31, "message": ""}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py", "lineno": 45, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py", "lineno": 66, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 250, "message": "in __init__"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 342, "message": "in start_session"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 429, "message": "in execute"}, {"path": "/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py", "lineno": 232, "message": "SessionNotCreatedException"}], "longrepr": "@pytest.fixture(scope=\"module\")\n    def driver():\n        \"\"\"Setup and teardown of Selenium WebDriver with headless mode.\"\"\"\n        options = Options()\n        options.add_argument(\"--headless\")  # Run in headless mode for GitHub Actions\n        options.add_argument(\"--no-sandbox\")\n        options.add_argument(\"--disable-dev-shm-usage\")\n        options.add_argument(\"--disable-gpu\")\n        options.add_argument(\"--window-size=1920,1080\")\n    \n>       driver = webdriver.Chrome(options=options)\n\nSelenium-test/app.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4fa0063100>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom unknown error:...\\\\n#15 0x55edb2147b33 \\\\u003Cunknown>\\\\n#16 0x55edb21582dc \\\\u003Cunknown>\\\\n#17 0x7fb0a812dac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from unknown error: no chrome binary at /usr/bin/google-chrome\nE       Stacktrace:\nE       #0 0x55edb215966a <unknown>\nE       #1 0x55edb1c2ad90 <unknown>\nE       #2 0x55edb1c61887 <unknown>\nE       #3 0x55edb1c5fc98 <unknown>\nE       #4 0x55edb1cafb30 <unknown>\nE       #5 0x55edb1caf0c6 <unknown>\nE       #6 0x55edb1ca1293 <unknown>\nE       #7 0x55edb1c6d6ba <unknown>\nE       #8 0x55edb1c6e821 <unknown>\nE       #9 0x55edb212050f <unknown>\nE       #10 0x55edb212459d <unknown>\nE       #11 0x55edb2107602 <unknown>\nE       #12 0x55edb2124d0e <unknown>\nE       #13 0x55edb20ed91e <unknown>\nE       #14 0x55edb2147928 <unknown>\nE       #15 0x55edb2147b33 <unknown>\nE       #16 0x55edb21582dc <unknown>\nE       #17 0x7fb0a812dac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException"}, "teardown": {"duration": 0.0002130489999956353, "outcome": "passed"}}]}